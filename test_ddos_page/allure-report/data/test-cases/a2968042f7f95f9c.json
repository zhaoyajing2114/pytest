{
  "uid" : "a2968042f7f95f9c",
  "name" : "test_new_defence_domain_success[IP段格式的防御域-39.98.36.0/30-1-1-绍兴BGP集群-模板1-赵雅静-]",
  "fullName" : "test_ddos_page.test_ddos.Test_Ddos#test_new_defence_domain_success",
  "historyId" : "95b4d549065f48ad4835ebc77fc08810",
  "time" : {
    "start" : 1607514501249,
    "stop" : 1607514510442,
    "duration" : 9193
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=85.0.4183.102)",
  "statusTrace" : "self = <test_ddos.Test_Ddos object at 0x0000026797C5EF10>\ndefence_domain_name = 'IP段格式的防御域', ips = '39.98.36.0/30', alarm = '1'\nalarm_type = '1', cluster_name = '绍兴BGP集群', model_name = '模板1', contect = '赵雅静'\ndescription = ''\nbrowser = (<selenium.webdriver.chrome.webdriver.WebDriver (session=\"66a56ea3236da56a7463ca2e7c7e55c7\")>, {'ddos任务列表': <page.ddos...ww.lvluoyun.com', '0922.lvluoyun.com'], 'success_sign': 'ya-phone-fill', 'url': 'http://yundun.test.nodevops.cn', ...})\n\n    @allure.story('验证各种格式的IP都能新增防御域成功')\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.run(order=9)\n    #@pytest.mark.skip\n    @pytest.mark.parametrize(\n        \"defence_domain_name, ips, alarm, alarm_type, cluster_name, model_name, contect, description\",\n        [('IP段格式的防御域', '39.98.36.0/30', '1', '1', '绍兴BGP集群', '模板1', '赵雅静', ''),\n         ('CIDR格式的防御域', '39.98.36.201-224', '1', '1', '绍兴BGP集群', '模板1', '赵雅静', ''),\n         ('单IP的防御域', '39.98.36.106', '1', '100', '绍兴BGP集群', '模板1', '赵雅静', ''),\n         ('多个单IP的防御域', '39.98.36.100\\n'\n                       '39.98.36.101\\n'\n                       '39.98.36.102\\n', '1', '100', '绍兴BGP集群', '模板1', '赵雅静', '')])\n    def test_new_defence_domain_success(self,defence_domain_name, ips, alarm, alarm_type, cluster_name, model_name, contect, description, browser):\n        driver = browser[0]\n        ddos_list = browser[1]['ddos任务列表']\n        ddos_list.refresh()\n        ddos_list.click_menu('业务列表')\n        ddos_list.click_new_domain()\n        #'填写防御域信息：防御域名称：{1} ;防御域IP：{2};告警阈值:{3};告警类型:{4};集群:{5};模板:{6};联系人:{7};描述:{8}'\n>       ddos_list.fill_defence_domain(defence_domain_name, ips, alarm, alarm_type, cluster_name, model_name, contect, description)\n\ntest_ddos.py:200: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\page\\ddos_list.py:55: in fill_defence_domain\n    self.find_element('xpath','//div[contains(@class,\"el-popper\") and not(contains(@style,\"none\"))]//li[contains(text(),\"%s\")]' % (\nD:\\software\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:80: in click\n    self._execute(Command.CLICK_ELEMENT)\nD:\\software\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:633: in _execute\n    return self._parent.execute(command, params)\nD:\\software\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002679742BA30>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77BD75F4+228]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77BD75C4+180]\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=85.0.4183.102)\n\nD:\\software\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: ElementNotInteractableException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=85.0.4183.102)",
    "statusTrace" : "self = <test_ddos.Test_Ddos object at 0x0000026797C5EF10>\ndefence_domain_name = 'IP段格式的防御域', ips = '39.98.36.0/30', alarm = '1'\nalarm_type = '1', cluster_name = '绍兴BGP集群', model_name = '模板1', contect = '赵雅静'\ndescription = ''\nbrowser = (<selenium.webdriver.chrome.webdriver.WebDriver (session=\"66a56ea3236da56a7463ca2e7c7e55c7\")>, {'ddos任务列表': <page.ddos...ww.lvluoyun.com', '0922.lvluoyun.com'], 'success_sign': 'ya-phone-fill', 'url': 'http://yundun.test.nodevops.cn', ...})\n\n    @allure.story('验证各种格式的IP都能新增防御域成功')\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.run(order=9)\n    #@pytest.mark.skip\n    @pytest.mark.parametrize(\n        \"defence_domain_name, ips, alarm, alarm_type, cluster_name, model_name, contect, description\",\n        [('IP段格式的防御域', '39.98.36.0/30', '1', '1', '绍兴BGP集群', '模板1', '赵雅静', ''),\n         ('CIDR格式的防御域', '39.98.36.201-224', '1', '1', '绍兴BGP集群', '模板1', '赵雅静', ''),\n         ('单IP的防御域', '39.98.36.106', '1', '100', '绍兴BGP集群', '模板1', '赵雅静', ''),\n         ('多个单IP的防御域', '39.98.36.100\\n'\n                       '39.98.36.101\\n'\n                       '39.98.36.102\\n', '1', '100', '绍兴BGP集群', '模板1', '赵雅静', '')])\n    def test_new_defence_domain_success(self,defence_domain_name, ips, alarm, alarm_type, cluster_name, model_name, contect, description, browser):\n        driver = browser[0]\n        ddos_list = browser[1]['ddos任务列表']\n        ddos_list.refresh()\n        ddos_list.click_menu('业务列表')\n        ddos_list.click_new_domain()\n        #'填写防御域信息：防御域名称：{1} ;防御域IP：{2};告警阈值:{3};告警类型:{4};集群:{5};模板:{6};联系人:{7};描述:{8}'\n>       ddos_list.fill_defence_domain(defence_domain_name, ips, alarm, alarm_type, cluster_name, model_name, contect, description)\n\ntest_ddos.py:200: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\page\\ddos_list.py:55: in fill_defence_domain\n    self.find_element('xpath','//div[contains(@class,\"el-popper\") and not(contains(@style,\"none\"))]//li[contains(text(),\"%s\")]' % (\nD:\\software\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:80: in click\n    self._execute(Command.CLICK_ELEMENT)\nD:\\software\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:633: in _execute\n    return self._parent.execute(command, params)\nD:\\software\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002679742BA30>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77BD75F4+228]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77BD75C4+180]\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=85.0.4183.102)\n\nD:\\software\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: ElementNotInteractableException",
    "steps" : [ {
      "name" : "刷新网页",
      "time" : {
        "start" : 1607514501249,
        "stop" : 1607514503743,
        "duration" : 2494
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "点击菜单：'业务列表'",
      "time" : {
        "start" : 1607514503743,
        "stop" : 1607514503886,
        "duration" : 143
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "查找元素:类型-'xpath'，定位：'//span[text()=\"DDoS原生清洗\"]/parent::div/..'",
        "time" : {
          "start" : 1607514503743,
          "stop" : 1607514503766,
          "duration" : 23
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ {
          "name" : "type",
          "value" : "'xpath'"
        }, {
          "name" : "path",
          "value" : "'//span[text()=\"DDoS原生清洗\"]/parent::div/..'"
        }, {
          "name" : "time_wait",
          "value" : "5"
        } ],
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "stepsCount" : 0,
        "hasContent" : true
      }, {
        "name" : "获取元素指定属性的值:'className'",
        "time" : {
          "start" : 1607514503766,
          "stop" : 1607514503777,
          "duration" : 11
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ {
          "name" : "ele",
          "value" : "<selenium.webdriver.remote.webelement.WebElement (session=\"66a56ea3236da56a7463ca2e7c7e55c7\", element=\"eaecbdd5-1128-4c76-9526-d4ccb3f690a6\")>"
        }, {
          "name" : "attr_name",
          "value" : "'className'"
        } ],
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "stepsCount" : 0,
        "hasContent" : true
      }, {
        "name" : "查找元素:类型-'xpath'，定位：'//div[contains(@class,\"FeMenuItemGroup__body\")]/div[not(contains(@style,\"none\"))]//span[contains(text(),\"业务列表\")]/ancestor::a'",
        "time" : {
          "start" : 1607514503777,
          "stop" : 1607514503801,
          "duration" : 24
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ {
          "name" : "type",
          "value" : "'xpath'"
        }, {
          "name" : "path",
          "value" : "'//div[contains(@class,\"FeMenuItemGroup__body\")]/div[not(contains(@style,\"none\"))]//span[contains(text(),\"业务列表\")]/ancestor::a'"
        }, {
          "name" : "time_wait",
          "value" : "2"
        } ],
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "stepsCount" : 0,
        "hasContent" : true
      } ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "menu_name",
        "value" : "'业务列表'"
      } ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 3,
      "hasContent" : true
    }, {
      "name" : "点击新增防御域",
      "time" : {
        "start" : 1607514503886,
        "stop" : 1607514504339,
        "duration" : 453
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "查找元素:类型-'xpath'，定位：'//span[text()=\"新增防御域\"]/..'",
        "time" : {
          "start" : 1607514503886,
          "stop" : 1607514503911,
          "duration" : 25
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ {
          "name" : "type",
          "value" : "'xpath'"
        }, {
          "name" : "path",
          "value" : "'//span[text()=\"新增防御域\"]/..'"
        }, {
          "name" : "time_wait",
          "value" : "2"
        } ],
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "stepsCount" : 0,
        "hasContent" : true
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 1,
      "hasContent" : true
    }, {
      "name" : "填写防御域信息--''：防御域名称：'IP段格式的防御域' ;防御域IP：'39.98.36.0/30';告警阈值:'1';告警类型:'1';集群:'绍兴BGP集群';模板:'模板1';联系人:'赵雅静';描述:''",
      "time" : {
        "start" : 1607514504339,
        "stop" : 1607514510428,
        "duration" : 6089
      },
      "status" : "broken",
      "statusMessage" : "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=85.0.4183.102)\n\n",
      "statusTrace" : "  File \"D:\\software\\python\\lib\\site-packages\\allure_commons\\_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"D:\\workspace\\pytest1\\page\\ddos_list.py\", line 55, in fill_defence_domain\n    self.find_element('xpath','//div[contains(@class,\"el-popper\") and not(contains(@style,\"none\"))]//li[contains(text(),\"%s\")]' % (\n  File \"D:\\software\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 80, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"D:\\software\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 633, in _execute\n    return self._parent.execute(command, params)\n  File \"D:\\software\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 321, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\software\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 242, in check_response\n    raise exception_class(message, screen, stacktrace)\n",
      "steps" : [ {
        "name" : "查找元素:类型-'xpath'，定位：'//input[@placeholder=\"域名称\"]'",
        "time" : {
          "start" : 1607514504339,
          "stop" : 1607514504355,
          "duration" : 16
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ {
          "name" : "type",
          "value" : "'xpath'"
        }, {
          "name" : "path",
          "value" : "'//input[@placeholder=\"域名称\"]'"
        }, {
          "name" : "time_wait",
          "value" : "2"
        } ],
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "stepsCount" : 0,
        "hasContent" : true
      }, {
        "name" : "查找元素:类型-'xpath'，定位：'//textarea[@placeholder=\"0.0.0.0\"]'",
        "time" : {
          "start" : 1607514504624,
          "stop" : 1607514504648,
          "duration" : 24
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ {
          "name" : "type",
          "value" : "'xpath'"
        }, {
          "name" : "path",
          "value" : "'//textarea[@placeholder=\"0.0.0.0\"]'"
        }, {
          "name" : "time_wait",
          "value" : "2"
        } ],
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "stepsCount" : 0,
        "hasContent" : true
      }, {
        "name" : "查找元素:类型-'xpath'，定位：'//input[@aria-label=\"描述文字\"]'",
        "time" : {
          "start" : 1607514504953,
          "stop" : 1607514504985,
          "duration" : 32
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ {
          "name" : "type",
          "value" : "'xpath'"
        }, {
          "name" : "path",
          "value" : "'//input[@aria-label=\"描述文字\"]'"
        }, {
          "name" : "time_wait",
          "value" : "2"
        } ],
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "stepsCount" : 0,
        "hasContent" : true
      }, {
        "name" : "查找元素:类型-'xpath'，定位：'(//div[@aria-label=\"checkbox-group\"]/label)[1]'",
        "time" : {
          "start" : 1607514505198,
          "stop" : 1607514505214,
          "duration" : 16
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ {
          "name" : "type",
          "value" : "'xpath'"
        }, {
          "name" : "path",
          "value" : "'(//div[@aria-label=\"checkbox-group\"]/label)[1]'"
        }, {
          "name" : "time_wait",
          "value" : "2"
        } ],
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "stepsCount" : 0,
        "hasContent" : true
      }, {
        "name" : "查找元素:类型-'xpath'，定位：'(//div[@aria-label=\"checkbox-group\"]/label)[2]'",
        "time" : {
          "start" : 1607514505214,
          "stop" : 1607514505250,
          "duration" : 36
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ {
          "name" : "type",
          "value" : "'xpath'"
        }, {
          "name" : "path",
          "value" : "'(//div[@aria-label=\"checkbox-group\"]/label)[2]'"
        }, {
          "name" : "time_wait",
          "value" : "2"
        } ],
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "stepsCount" : 0,
        "hasContent" : true
      }, {
        "name" : "查找元素:类型-'xpath'，定位：'//label[contains(text(),\"清洗设备集群\")]/following-sibling::div[1]//i'",
        "time" : {
          "start" : 1607514505250,
          "stop" : 1607514505271,
          "duration" : 21
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ {
          "name" : "type",
          "value" : "'xpath'"
        }, {
          "name" : "path",
          "value" : "'//label[contains(text(),\"清洗设备集群\")]/following-sibling::div[1]//i'"
        }, {
          "name" : "time_wait",
          "value" : "2"
        } ],
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "stepsCount" : 0,
        "hasContent" : true
      }, {
        "name" : "查找元素:类型-'xpath'，定位：'//div[contains(@class,\"el-popper\") and not(contains(@style,\"none\"))]//li[contains(text(),\"绍兴BGP集群\")]'",
        "time" : {
          "start" : 1607514505365,
          "stop" : 1607514505383,
          "duration" : 18
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ {
          "name" : "type",
          "value" : "'xpath'"
        }, {
          "name" : "path",
          "value" : "'//div[contains(@class,\"el-popper\") and not(contains(@style,\"none\"))]//li[contains(text(),\"绍兴BGP集群\")]'"
        }, {
          "name" : "time_wait",
          "value" : "2"
        } ],
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "stepsCount" : 0,
        "hasContent" : true
      } ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "defence_domain_name",
        "value" : "'IP段格式的防御域'"
      }, {
        "name" : "ips",
        "value" : "'39.98.36.0/30'"
      }, {
        "name" : "alarm",
        "value" : "'1'"
      }, {
        "name" : "alarm_type",
        "value" : "'1'"
      }, {
        "name" : "cluster_name",
        "value" : "'绍兴BGP集群'"
      }, {
        "name" : "model_name",
        "value" : "'模板1'"
      }, {
        "name" : "contect",
        "value" : "'赵雅静'"
      }, {
        "name" : "description",
        "value" : "''"
      } ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "stepsCount" : 7,
      "hasContent" : true
    }, {
      "name" : "添加失败截图...",
      "time" : {
        "start" : 1607514510508,
        "stop" : 1607514510951,
        "duration" : 443
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "419bc6c518ede739",
        "name" : "失败截图",
        "source" : "419bc6c518ede739.png",
        "type" : "image/png",
        "size" : 142133
      } ],
      "parameters" : [ ],
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "stepsCount" : 16,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "severity",
    "value" : "critical"
  }, {
    "name" : "story",
    "value" : "验证各种格式的IP都能新增防御域成功"
  }, {
    "name" : "feature",
    "value" : "ddos页面的测试"
  }, {
    "name" : "tag",
    "value" : "run(order=9)"
  }, {
    "name" : "parentSuite",
    "value" : "test_ddos_page"
  }, {
    "name" : "suite",
    "value" : "test_ddos"
  }, {
    "name" : "subSuite",
    "value" : "Test_Ddos"
  }, {
    "name" : "host",
    "value" : "LAPTOP-HRAELMRK"
  }, {
    "name" : "thread",
    "value" : "22492-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_ddos_page.test_ddos"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "alarm",
    "value" : "'1'"
  }, {
    "name" : "alarm_type",
    "value" : "'1'"
  }, {
    "name" : "cluster_name",
    "value" : "'绍兴BGP集群'"
  }, {
    "name" : "contect",
    "value" : "'赵雅静'"
  }, {
    "name" : "defence_domain_name",
    "value" : "'IP段格式的防御域'"
  }, {
    "name" : "description",
    "value" : "''"
  }, {
    "name" : "ips",
    "value" : "'39.98.36.0/30'"
  }, {
    "name" : "model_name",
    "value" : "'模板1'"
  } ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "run(order=9)" ]
  },
  "source" : "a2968042f7f95f9c.json",
  "parameterValues" : [ "'1'", "'1'", "'绍兴BGP集群'", "'赵雅静'", "'IP段格式的防御域'", "''", "'39.98.36.0/30'", "'模板1'" ]
}