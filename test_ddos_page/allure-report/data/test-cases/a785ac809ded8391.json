{
  "uid" : "a785ac809ded8391",
  "name" : "test_add_device_disabled[-1-60-60-1-1-赵雅静-设备IP不能为空]",
  "fullName" : "test_ddos_page.test_ddos.Test_Ddos#test_add_device_disabled",
  "historyId" : "841ad2a5b49fd600cc7dd5052abed2fb",
  "time" : {
    "start" : 1607516794364,
    "stop" : 1607516801017,
    "duration" : 6653
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <li class=\"el-select-dropdown__item\" size=\"\">...</li> is not clickable at point (962, 595). Other element would receive the click: <li class=\"el-select-dropdown__item\" size=\"\">...</li>\n  (Session info: chrome=85.0.4183.102)",
  "statusTrace" : "self = <test_ddos.Test_Ddos object at 0x0000016058773FD0>, device_ip = ''\nstart = 1, cpu = '60', mem = '60', network_card = 1, alarm_type = 1\nalarm_person = '赵雅静', desc = '设备IP不能为空'\nbrowser = (<selenium.webdriver.chrome.webdriver.WebDriver (session=\"4cc159a7e293460c8f896c5f30c1525e\")>, {'ddos任务列表': <page.ddos...ww.lvluoyun.com', '0922.lvluoyun.com'], 'success_sign': 'ya-phone-fill', 'url': 'http://yundun.test.nodevops.cn', ...})\n\n    @allure.story('测试给禁用集群新增设备')\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.run(order=12)\n    @pytest.mark.parametrize('device_ip, start, cpu, mem, network_card , alarm_type, alarm_person, desc',\n                             [('45.250.34.12', 0, '60', '60', 1, 1, '赵雅静', '描述'),\n                              ('45.250.34.11', 1, '60', '60', 0, 1, '赵雅静', '描述'),\n                              ('45.250.34.10', 1, '99', '99', 1, 2, '赵雅静', '描述'),\n                              ('45.250.34.9', 1, '60', '60', 1, 1, '', '告警接收人不能为空'),\n                              ('123', 1, '60', '60', 1, 1, '赵雅静', '设备IP格式错误'),\n                              ('', 1, '60', '60', 1, 1, '赵雅静', '设备IP不能为空'),\n                              ('45.250.34.132', 1, '60', '60', 1, 1, '赵雅静', '设备已存在')])\n    #@pytest.mark.skip\n    def test_add_device_disabled(self, device_ip, start, cpu, mem, network_card, alarm_type, alarm_person, desc, browser):\n        driver = browser[0]\n        ddos_list = browser[1]['ddos任务列表']\n        ddos_cluster = browser[1]['ddos集群管理']\n        ddos_list.refresh()\n        ddos_list.click_menu('集群管理')\n        ddos_cluster.click_configure_device('测试集群')\n        ddos_cluster.click_new_device()\n>       ddos_cluster.fill_device_table(device_ip, start, cpu, mem, network_card, alarm_type, alarm_person, desc)\n\ntest_ddos.py:283: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\page\\ddos_cluster.py:78: in fill_device_table\n    self.find_element('xpath',\nD:\\software\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:80: in click\n    self._execute(Command.CLICK_ELEMENT)\nD:\\software\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:633: in _execute\n    return self._parent.execute(command, params)\nD:\\software\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001605744CD60>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77BD75F4+228]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77BD75C4+180]\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <li class=\"el-select-dropdown__item\" size=\"\">...</li> is not clickable at point (962, 595). Other element would receive the click: <li class=\"el-select-dropdown__item\" size=\"\">...</li>\nE         (Session info: chrome=85.0.4183.102)\n\nD:\\software\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: ElementClickInterceptedException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "browser",
    "time" : {
      "start" : 1607516492538,
      "stop" : 1607516497912,
      "duration" : 5374
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <li class=\"el-select-dropdown__item\" size=\"\">...</li> is not clickable at point (962, 595). Other element would receive the click: <li class=\"el-select-dropdown__item\" size=\"\">...</li>\n  (Session info: chrome=85.0.4183.102)",
    "statusTrace" : "self = <test_ddos.Test_Ddos object at 0x0000016058773FD0>, device_ip = ''\nstart = 1, cpu = '60', mem = '60', network_card = 1, alarm_type = 1\nalarm_person = '赵雅静', desc = '设备IP不能为空'\nbrowser = (<selenium.webdriver.chrome.webdriver.WebDriver (session=\"4cc159a7e293460c8f896c5f30c1525e\")>, {'ddos任务列表': <page.ddos...ww.lvluoyun.com', '0922.lvluoyun.com'], 'success_sign': 'ya-phone-fill', 'url': 'http://yundun.test.nodevops.cn', ...})\n\n    @allure.story('测试给禁用集群新增设备')\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.run(order=12)\n    @pytest.mark.parametrize('device_ip, start, cpu, mem, network_card , alarm_type, alarm_person, desc',\n                             [('45.250.34.12', 0, '60', '60', 1, 1, '赵雅静', '描述'),\n                              ('45.250.34.11', 1, '60', '60', 0, 1, '赵雅静', '描述'),\n                              ('45.250.34.10', 1, '99', '99', 1, 2, '赵雅静', '描述'),\n                              ('45.250.34.9', 1, '60', '60', 1, 1, '', '告警接收人不能为空'),\n                              ('123', 1, '60', '60', 1, 1, '赵雅静', '设备IP格式错误'),\n                              ('', 1, '60', '60', 1, 1, '赵雅静', '设备IP不能为空'),\n                              ('45.250.34.132', 1, '60', '60', 1, 1, '赵雅静', '设备已存在')])\n    #@pytest.mark.skip\n    def test_add_device_disabled(self, device_ip, start, cpu, mem, network_card, alarm_type, alarm_person, desc, browser):\n        driver = browser[0]\n        ddos_list = browser[1]['ddos任务列表']\n        ddos_cluster = browser[1]['ddos集群管理']\n        ddos_list.refresh()\n        ddos_list.click_menu('集群管理')\n        ddos_cluster.click_configure_device('测试集群')\n        ddos_cluster.click_new_device()\n>       ddos_cluster.fill_device_table(device_ip, start, cpu, mem, network_card, alarm_type, alarm_person, desc)\n\ntest_ddos.py:283: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\page\\ddos_cluster.py:78: in fill_device_table\n    self.find_element('xpath',\nD:\\software\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:80: in click\n    self._execute(Command.CLICK_ELEMENT)\nD:\\software\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:633: in _execute\n    return self._parent.execute(command, params)\nD:\\software\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001605744CD60>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77BD75F4+228]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77BD75C4+180]\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <li class=\"el-select-dropdown__item\" size=\"\">...</li> is not clickable at point (962, 595). Other element would receive the click: <li class=\"el-select-dropdown__item\" size=\"\">...</li>\nE         (Session info: chrome=85.0.4183.102)\n\nD:\\software\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: ElementClickInterceptedException",
    "steps" : [ {
      "name" : "刷新网页",
      "time" : {
        "start" : 1607516794364,
        "stop" : 1607516796869,
        "duration" : 2505
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "点击菜单：'集群管理'",
      "time" : {
        "start" : 1607516796870,
        "stop" : 1607516796953,
        "duration" : 83
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "查找元素:类型-'xpath'，定位：'//span[text()=\"DDoS原生清洗\"]/parent::div/..'",
        "time" : {
          "start" : 1607516796870,
          "stop" : 1607516796887,
          "duration" : 17
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ {
          "name" : "type",
          "value" : "'xpath'"
        }, {
          "name" : "path",
          "value" : "'//span[text()=\"DDoS原生清洗\"]/parent::div/..'"
        }, {
          "name" : "time_wait",
          "value" : "5"
        } ],
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "stepsCount" : 0,
        "hasContent" : true
      }, {
        "name" : "获取元素指定属性的值:'className'",
        "time" : {
          "start" : 1607516796887,
          "stop" : 1607516796894,
          "duration" : 7
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ {
          "name" : "ele",
          "value" : "<selenium.webdriver.remote.webelement.WebElement (session=\"4cc159a7e293460c8f896c5f30c1525e\", element=\"b4342c05-3138-42bc-a590-9bd5cc6b089d\")>"
        }, {
          "name" : "attr_name",
          "value" : "'className'"
        } ],
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "stepsCount" : 0,
        "hasContent" : true
      }, {
        "name" : "查找元素:类型-'xpath'，定位：'//div[contains(@class,\"FeMenuItemGroup__body\")]/div[not(contains(@style,\"none\"))]//span[contains(text(),\"集群管理\")]/ancestor::a'",
        "time" : {
          "start" : 1607516796894,
          "stop" : 1607516796903,
          "duration" : 9
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ {
          "name" : "type",
          "value" : "'xpath'"
        }, {
          "name" : "path",
          "value" : "'//div[contains(@class,\"FeMenuItemGroup__body\")]/div[not(contains(@style,\"none\"))]//span[contains(text(),\"集群管理\")]/ancestor::a'"
        }, {
          "name" : "time_wait",
          "value" : "2"
        } ],
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "stepsCount" : 0,
        "hasContent" : true
      } ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "menu_name",
        "value" : "'集群管理'"
      } ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 3,
      "hasContent" : true
    }, {
      "name" : "点击配置设备",
      "time" : {
        "start" : 1607516796954,
        "stop" : 1607516798697,
        "duration" : 1743
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "查找元素:类型-'xpath'，定位：'//div[contains(text(),\"测试集群\")]/ancestor::tr//a[contains(text(),\"配置设备\")]'",
        "time" : {
          "start" : 1607516796954,
          "stop" : 1607516798592,
          "duration" : 1638
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ {
          "name" : "type",
          "value" : "'xpath'"
        }, {
          "name" : "path",
          "value" : "'//div[contains(text(),\"测试集群\")]/ancestor::tr//a[contains(text(),\"配置设备\")]'"
        }, {
          "name" : "time_wait",
          "value" : "2"
        } ],
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "stepsCount" : 0,
        "hasContent" : true
      } ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "cluster_name",
        "value" : "'测试集群'"
      } ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 1,
      "hasContent" : true
    }, {
      "name" : "点击新增设备",
      "time" : {
        "start" : 1607516798697,
        "stop" : 1607516798786,
        "duration" : 89
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "查找元素:类型-'xpath'，定位：'//span[text()=\"新增设备\"]/..'",
        "time" : {
          "start" : 1607516798697,
          "stop" : 1607516798707,
          "duration" : 10
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ {
          "name" : "type",
          "value" : "'xpath'"
        }, {
          "name" : "path",
          "value" : "'//span[text()=\"新增设备\"]/..'"
        }, {
          "name" : "time_wait",
          "value" : "2"
        } ],
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "stepsCount" : 0,
        "hasContent" : true
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 1,
      "hasContent" : true
    }, {
      "name" : "填写设备表单",
      "time" : {
        "start" : 1607516798786,
        "stop" : 1607516801017,
        "duration" : 2231
      },
      "status" : "broken",
      "statusMessage" : "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <li class=\"el-select-dropdown__item\" size=\"\">...</li> is not clickable at point (962, 595). Other element would receive the click: <li class=\"el-select-dropdown__item\" size=\"\">...</li>\n  (Session info: chrome=85.0.4183.102)\n\n",
      "statusTrace" : "  File \"D:\\software\\python\\lib\\site-packages\\allure_commons\\_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"D:\\workspace\\pytest1\\page\\ddos_cluster.py\", line 78, in fill_device_table\n    self.find_element('xpath',\n  File \"D:\\software\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 80, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"D:\\software\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 633, in _execute\n    return self._parent.execute(command, params)\n  File \"D:\\software\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 321, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\software\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 242, in check_response\n    raise exception_class(message, screen, stacktrace)\n",
      "steps" : [ {
        "name" : "查找元素:类型-'xpath'，定位：'//input[@placeholder=\"0.0.0.0\"]'",
        "time" : {
          "start" : 1607516798786,
          "stop" : 1607516798799,
          "duration" : 13
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ {
          "name" : "type",
          "value" : "'xpath'"
        }, {
          "name" : "path",
          "value" : "'//input[@placeholder=\"0.0.0.0\"]'"
        }, {
          "name" : "time_wait",
          "value" : "2"
        } ],
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "stepsCount" : 0,
        "hasContent" : true
      }, {
        "name" : "查找元素:类型-'xpath'，定位：'//label[text()=\"是否启用\"]/following::div[1]//div[contains(@class,\"el-switch\")]'",
        "time" : {
          "start" : 1607516798849,
          "stop" : 1607516798857,
          "duration" : 8
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ {
          "name" : "type",
          "value" : "'xpath'"
        }, {
          "name" : "path",
          "value" : "'//label[text()=\"是否启用\"]/following::div[1]//div[contains(@class,\"el-switch\")]'"
        }, {
          "name" : "time_wait",
          "value" : "2"
        } ],
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "stepsCount" : 0,
        "hasContent" : true
      }, {
        "name" : "校验元素属性:类型-'xpath'，定位：'//label[text()=\"是否启用\"]/following::div[1]//div[contains(@class,\"el-switch\")]'，预期内容'checked'，属性：'className'",
        "time" : {
          "start" : 1607516798857,
          "stop" : 1607516798994,
          "duration" : 137
        },
        "status" : "passed",
        "steps" : [ {
          "name" : "查找元素:类型-'xpath'，定位：'//label[text()=\"是否启用\"]/following::div[1]//div[contains(@class,\"el-switch\")]'",
          "time" : {
            "start" : 1607516798857,
            "stop" : 1607516798871,
            "duration" : 14
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ ],
          "parameters" : [ {
            "name" : "type",
            "value" : "'xpath'"
          }, {
            "name" : "path",
            "value" : "'//label[text()=\"是否启用\"]/following::div[1]//div[contains(@class,\"el-switch\")]'"
          }, {
            "name" : "time_wait",
            "value" : "2"
          } ],
          "attachmentsCount" : 0,
          "shouldDisplayMessage" : false,
          "stepsCount" : 0,
          "hasContent" : true
        } ],
        "attachments" : [ ],
        "parameters" : [ {
          "name" : "type",
          "value" : "'xpath'"
        }, {
          "name" : "path",
          "value" : "'//label[text()=\"是否启用\"]/following::div[1]//div[contains(@class,\"el-switch\")]'"
        }, {
          "name" : "ele_text",
          "value" : "'checked'"
        }, {
          "name" : "attr",
          "value" : "'className'"
        }, {
          "name" : "time_wait",
          "value" : "2"
        } ],
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "stepsCount" : 1,
        "hasContent" : true
      }, {
        "name" : "查找元素:类型-'xpath'，定位：'//label[text()=\"CPU使用率(%)\"]/following::div[1]//input'",
        "time" : {
          "start" : 1607516798994,
          "stop" : 1607516799009,
          "duration" : 15
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ {
          "name" : "type",
          "value" : "'xpath'"
        }, {
          "name" : "path",
          "value" : "'//label[text()=\"CPU使用率(%)\"]/following::div[1]//input'"
        }, {
          "name" : "time_wait",
          "value" : "2"
        } ],
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "stepsCount" : 0,
        "hasContent" : true
      }, {
        "name" : "查找元素:类型-'xpath'，定位：'//label[text()=\"内存使用率(%)\"]/following::div[1]//input'",
        "time" : {
          "start" : 1607516799143,
          "stop" : 1607516799157,
          "duration" : 14
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ {
          "name" : "type",
          "value" : "'xpath'"
        }, {
          "name" : "path",
          "value" : "'//label[text()=\"内存使用率(%)\"]/following::div[1]//input'"
        }, {
          "name" : "time_wait",
          "value" : "2"
        } ],
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "stepsCount" : 0,
        "hasContent" : true
      }, {
        "name" : "查找元素:类型-'xpath'，定位：'//label[text()=\"网卡故障\"]/following::div[1]//div[contains(@class,\"el-switch\")]'",
        "time" : {
          "start" : 1607516799288,
          "stop" : 1607516799296,
          "duration" : 8
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ {
          "name" : "type",
          "value" : "'xpath'"
        }, {
          "name" : "path",
          "value" : "'//label[text()=\"网卡故障\"]/following::div[1]//div[contains(@class,\"el-switch\")]'"
        }, {
          "name" : "time_wait",
          "value" : "2"
        } ],
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "stepsCount" : 0,
        "hasContent" : true
      }, {
        "name" : "校验元素属性:类型-'xpath'，定位：'//label[text()=\"网卡故障\"]/following::div[1]//div[contains(@class,\"el-switch\")]'，预期内容'checked'，属性：'className'",
        "time" : {
          "start" : 1607516799296,
          "stop" : 1607516799725,
          "duration" : 429
        },
        "status" : "passed",
        "steps" : [ {
          "name" : "查找元素:类型-'xpath'，定位：'//label[text()=\"网卡故障\"]/following::div[1]//div[contains(@class,\"el-switch\")]'",
          "time" : {
            "start" : 1607516799296,
            "stop" : 1607516799307,
            "duration" : 11
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ ],
          "parameters" : [ {
            "name" : "type",
            "value" : "'xpath'"
          }, {
            "name" : "path",
            "value" : "'//label[text()=\"网卡故障\"]/following::div[1]//div[contains(@class,\"el-switch\")]'"
          }, {
            "name" : "time_wait",
            "value" : "2"
          } ],
          "attachmentsCount" : 0,
          "shouldDisplayMessage" : false,
          "stepsCount" : 0,
          "hasContent" : true
        } ],
        "attachments" : [ {
          "uid" : "e2e3e3689a7ee13a",
          "name" : "预期文本与实际不同",
          "source" : "e2e3e3689a7ee13a.png",
          "type" : "image/png",
          "size" : 468
        } ],
        "parameters" : [ {
          "name" : "type",
          "value" : "'xpath'"
        }, {
          "name" : "path",
          "value" : "'//label[text()=\"网卡故障\"]/following::div[1]//div[contains(@class,\"el-switch\")]'"
        }, {
          "name" : "ele_text",
          "value" : "'checked'"
        }, {
          "name" : "attr",
          "value" : "'className'"
        }, {
          "name" : "time_wait",
          "value" : "2"
        } ],
        "attachmentsCount" : 1,
        "shouldDisplayMessage" : false,
        "stepsCount" : 1,
        "hasContent" : true
      }, {
        "name" : "查找元素:类型-'xpath'，定位：'(//div[@aria-label=\"checkbox-group\"]/label)[1]'",
        "time" : {
          "start" : 1607516799782,
          "stop" : 1607516799790,
          "duration" : 8
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ {
          "name" : "type",
          "value" : "'xpath'"
        }, {
          "name" : "path",
          "value" : "'(//div[@aria-label=\"checkbox-group\"]/label)[1]'"
        }, {
          "name" : "time_wait",
          "value" : "2"
        } ],
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "stepsCount" : 0,
        "hasContent" : true
      }, {
        "name" : "查找元素:类型-'xpath'，定位：'(//div[@aria-label=\"checkbox-group\"]/label)[2]'",
        "time" : {
          "start" : 1607516799794,
          "stop" : 1607516799806,
          "duration" : 12
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ {
          "name" : "type",
          "value" : "'xpath'"
        }, {
          "name" : "path",
          "value" : "'(//div[@aria-label=\"checkbox-group\"]/label)[2]'"
        }, {
          "name" : "time_wait",
          "value" : "2"
        } ],
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "stepsCount" : 0,
        "hasContent" : true
      }, {
        "name" : "查找元素:类型-'xpath'，定位：'//label[contains(text(),\"告警联系人\")]/following-sibling::div[1]//i'",
        "time" : {
          "start" : 1607516799862,
          "stop" : 1607516799877,
          "duration" : 15
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ {
          "name" : "type",
          "value" : "'xpath'"
        }, {
          "name" : "path",
          "value" : "'//label[contains(text(),\"告警联系人\")]/following-sibling::div[1]//i'"
        }, {
          "name" : "time_wait",
          "value" : "2"
        } ],
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "stepsCount" : 0,
        "hasContent" : true
      }, {
        "name" : "查找元素:类型-'xpath'，定位：'//div[contains(@class,\"el-popper\") and not(contains(@style,\"none\"))]//li[contains(text(),\"赵雅静\")]'",
        "time" : {
          "start" : 1607516799941,
          "stop" : 1607516799956,
          "duration" : 15
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ {
          "name" : "type",
          "value" : "'xpath'"
        }, {
          "name" : "path",
          "value" : "'//div[contains(@class,\"el-popper\") and not(contains(@style,\"none\"))]//li[contains(text(),\"赵雅静\")]'"
        }, {
          "name" : "time_wait",
          "value" : "2"
        } ],
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "stepsCount" : 0,
        "hasContent" : true
      } ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "device_ip",
        "value" : "''"
      }, {
        "name" : "start",
        "value" : "1"
      }, {
        "name" : "cpu",
        "value" : "'60'"
      }, {
        "name" : "mem",
        "value" : "'60'"
      }, {
        "name" : "network_card",
        "value" : "1"
      }, {
        "name" : "alarm_type",
        "value" : "1"
      }, {
        "name" : "alarm_person",
        "value" : "'赵雅静'"
      }, {
        "name" : "desc",
        "value" : "'设备IP不能为空'"
      } ],
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : true,
      "stepsCount" : 13,
      "hasContent" : true
    }, {
      "name" : "添加失败截图...",
      "time" : {
        "start" : 1607516801096,
        "stop" : 1607516801442,
        "duration" : 346
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "97d463c109ae9320",
        "name" : "失败截图",
        "source" : "97d463c109ae9320.png",
        "type" : "image/png",
        "size" : 91453
      } ],
      "parameters" : [ ],
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true,
    "stepsCount" : 24,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "browser::0",
    "time" : {
      "start" : 1607516875935,
      "stop" : 1607516875935,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "ddos页面的测试"
  }, {
    "name" : "story",
    "value" : "测试给禁用集群新增设备"
  }, {
    "name" : "severity",
    "value" : "critical"
  }, {
    "name" : "tag",
    "value" : "run(order=12)"
  }, {
    "name" : "parentSuite",
    "value" : "test_ddos_page"
  }, {
    "name" : "suite",
    "value" : "test_ddos"
  }, {
    "name" : "subSuite",
    "value" : "Test_Ddos"
  }, {
    "name" : "host",
    "value" : "LAPTOP-HRAELMRK"
  }, {
    "name" : "thread",
    "value" : "15284-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_ddos_page.test_ddos"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "alarm_person",
    "value" : "'赵雅静'"
  }, {
    "name" : "alarm_type",
    "value" : "1"
  }, {
    "name" : "cpu",
    "value" : "'60'"
  }, {
    "name" : "desc",
    "value" : "'设备IP不能为空'"
  }, {
    "name" : "device_ip",
    "value" : "''"
  }, {
    "name" : "mem",
    "value" : "'60'"
  }, {
    "name" : "network_card",
    "value" : "1"
  }, {
    "name" : "start",
    "value" : "1"
  } ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "run(order=12)" ]
  },
  "source" : "a785ac809ded8391.json",
  "parameterValues" : [ "'赵雅静'", "1", "'60'", "'设备IP不能为空'", "''", "'60'", "1", "1" ]
}