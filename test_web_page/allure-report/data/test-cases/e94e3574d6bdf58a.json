{
  "uid" : "e94e3574d6bdf58a",
  "name" : "test_https_default[0]",
  "fullName" : "test_web_page.test_config.TestConfig#test_https_default",
  "historyId" : "735153dcc401835e60c309e1470872d2",
  "time" : {
    "start" : 1607507817356,
    "stop" : 1607507818875,
    "duration" : 1519
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div class=\"FeMenuItemGroup FeMenuItemGroup--open FeMenuItemGroup\">...</div> is not clickable at point (92, 354). Other element would receive the click: <div class=\"el-dialog__wrapper yd-dialog is-aside yd-dialog-aside--top size--undefined DmDialog\" style=\"z-index: 3010;\">...</div>\n  (Session info: chrome=85.0.4183.102)",
  "statusTrace" : "self = <test_config.TestConfig object at 0x00000264FE62B9D0>, second_time = 0\nbrowser = (<selenium.webdriver.chrome.webdriver.WebDriver (session=\"5f0ed601af940c313626e4eadd42b10f\")>, {'ddos任务列表': <page.ddos...ww.lvluoyun.com', '0922.lvluoyun.com'], 'success_sign': 'ya-phone-fill', 'url': 'http://yundun.test.nodevops.cn', ...})\n\n    \n    @pytest.mark.test\n    @allure.story('批量修改tls版本')\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.run(order=5)\n    @pytest.mark.parametrize('second_time', [0, 1])\n    def test_https_default(self, second_time,browser):\n        site_list_page = browser[1]['web安全加速']\n        page = browser[1]['登录页面']\n        env = browser[2]\n        except_result = ['config_time', 'server_name', 'ssl.status', 'ssl.key', 'ssl.http2https', 'ssl.min_version',\n                         'ssl.http2_disable'\n            , 'ssl.hsts', 'proxy_connect_timeout', 'proxy_keepalive', 'health_check.max_fails',\n                         'health_check.fails_timeout', 'health_check.keep_new_src_time']\n        with allure.step('获取网站的初始配置'):\n            before_conf_list = []  # 被测网址的配置\n            # site_names = ['1014.lvluoyun.com','0922.lvluoyun.com','www.lvluoyun.com']\n            site_names = env['site_names']\n            for item in site_names:\n                before_config = site_list_page.get_formal_config_in_redis(item, except_result)\n                before_conf_list.append(before_config)\n>       with allure.step('打开web安全加速，批量选择网站'):\n\ntest_config.py:254: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\page\\web_security_list.py:21: in click_web\n    self.find_element('xpath', '//span[text()=\"WEB安全加速\"]/ancestor::div[contains(@class,\"FeMenuItemGroup\") and not(contains(@class,\"header\"))]',time_wait=5).click()\nD:\\software\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:80: in click\n    self._execute(Command.CLICK_ELEMENT)\nD:\\software\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:633: in _execute\n    return self._parent.execute(command, params)\nD:\\software\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000264FE520400>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77BD75F4+228]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77BD75C4+180]\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div class=\"FeMenuItemGroup FeMenuItemGroup--open FeMenuItemGroup\">...</div> is not clickable at point (92, 354). Other element would receive the click: <div class=\"el-dialog__wrapper yd-dialog is-aside yd-dialog-aside--top size--undefined DmDialog\" style=\"z-index: 3010;\">...</div>\nE         (Session info: chrome=85.0.4183.102)\n\nD:\\software\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: ElementClickInterceptedException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "browser",
    "time" : {
      "start" : 1607507547911,
      "stop" : 1607507553168,
      "duration" : 5257
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div class=\"FeMenuItemGroup FeMenuItemGroup--open FeMenuItemGroup\">...</div> is not clickable at point (92, 354). Other element would receive the click: <div class=\"el-dialog__wrapper yd-dialog is-aside yd-dialog-aside--top size--undefined DmDialog\" style=\"z-index: 3010;\">...</div>\n  (Session info: chrome=85.0.4183.102)",
    "statusTrace" : "self = <test_config.TestConfig object at 0x00000264FE62B9D0>, second_time = 0\nbrowser = (<selenium.webdriver.chrome.webdriver.WebDriver (session=\"5f0ed601af940c313626e4eadd42b10f\")>, {'ddos任务列表': <page.ddos...ww.lvluoyun.com', '0922.lvluoyun.com'], 'success_sign': 'ya-phone-fill', 'url': 'http://yundun.test.nodevops.cn', ...})\n\n    \n    @pytest.mark.test\n    @allure.story('批量修改tls版本')\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.run(order=5)\n    @pytest.mark.parametrize('second_time', [0, 1])\n    def test_https_default(self, second_time,browser):\n        site_list_page = browser[1]['web安全加速']\n        page = browser[1]['登录页面']\n        env = browser[2]\n        except_result = ['config_time', 'server_name', 'ssl.status', 'ssl.key', 'ssl.http2https', 'ssl.min_version',\n                         'ssl.http2_disable'\n            , 'ssl.hsts', 'proxy_connect_timeout', 'proxy_keepalive', 'health_check.max_fails',\n                         'health_check.fails_timeout', 'health_check.keep_new_src_time']\n        with allure.step('获取网站的初始配置'):\n            before_conf_list = []  # 被测网址的配置\n            # site_names = ['1014.lvluoyun.com','0922.lvluoyun.com','www.lvluoyun.com']\n            site_names = env['site_names']\n            for item in site_names:\n                before_config = site_list_page.get_formal_config_in_redis(item, except_result)\n                before_conf_list.append(before_config)\n>       with allure.step('打开web安全加速，批量选择网站'):\n\ntest_config.py:254: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\page\\web_security_list.py:21: in click_web\n    self.find_element('xpath', '//span[text()=\"WEB安全加速\"]/ancestor::div[contains(@class,\"FeMenuItemGroup\") and not(contains(@class,\"header\"))]',time_wait=5).click()\nD:\\software\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:80: in click\n    self._execute(Command.CLICK_ELEMENT)\nD:\\software\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:633: in _execute\n    return self._parent.execute(command, params)\nD:\\software\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000264FE520400>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77BD75F4+228]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77BD75C4+180]\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div class=\"FeMenuItemGroup FeMenuItemGroup--open FeMenuItemGroup\">...</div> is not clickable at point (92, 354). Other element would receive the click: <div class=\"el-dialog__wrapper yd-dialog is-aside yd-dialog-aside--top size--undefined DmDialog\" style=\"z-index: 3010;\">...</div>\nE         (Session info: chrome=85.0.4183.102)\n\nD:\\software\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: ElementClickInterceptedException",
    "steps" : [ {
      "name" : "获取网站的初始配置",
      "time" : {
        "start" : 1607507817357,
        "stop" : 1607507817797,
        "duration" : 440
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "从redis中获取网站的初始配置",
        "time" : {
          "start" : 1607507817357,
          "stop" : 1607507817553,
          "duration" : 196
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ {
          "name" : "site_name",
          "value" : "'www.lvluoyun.com'"
        }, {
          "name" : "except_result",
          "value" : "['config_time', 'server_name', 'ssl.status', 'ssl.key', 'ssl.http2https', 'ssl.min_version', 'ssl.http2_disable', 'ssl.hsts', 'proxy_connect_timeout', 'proxy_keepalive', 'health_check.max_fails', 'health_check.fails_timeout', 'health_check.keep_new_src_time']"
        } ],
        "hasContent" : true,
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false
      }, {
        "name" : "从redis中获取网站的初始配置",
        "time" : {
          "start" : 1607507817553,
          "stop" : 1607507817797,
          "duration" : 244
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ {
          "name" : "site_name",
          "value" : "'0922.lvluoyun.com'"
        }, {
          "name" : "except_result",
          "value" : "['config_time', 'server_name', 'ssl.status', 'ssl.key', 'ssl.http2https', 'ssl.min_version', 'ssl.http2_disable', 'ssl.hsts', 'proxy_connect_timeout', 'proxy_keepalive', 'health_check.max_fails', 'health_check.fails_timeout', 'health_check.keep_new_src_time']"
        } ],
        "hasContent" : true,
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 2,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "打开web安全加速，批量选择网站",
      "time" : {
        "start" : 1607507817797,
        "stop" : 1607507818874,
        "duration" : 1077
      },
      "status" : "broken",
      "statusMessage" : "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div class=\"FeMenuItemGroup FeMenuItemGroup--open FeMenuItemGroup\">...</div> is not clickable at point (92, 354). Other element would receive the click: <div class=\"el-dialog__wrapper yd-dialog is-aside yd-dialog-aside--top size--undefined DmDialog\" style=\"z-index: 3010;\">...</div>\n  (Session info: chrome=85.0.4183.102)\n\n",
      "statusTrace" : "  File \"D:\\workspace\\pytest1\\test_web_page\\test_config.py\", line 254, in test_https_default\n    with allure.step('打开web安全加速，批量选择网站'):\n  File \"D:\\software\\python\\lib\\site-packages\\allure_commons\\_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"D:\\workspace\\pytest1\\page\\web_security_list.py\", line 21, in click_web\n    self.find_element('xpath', '//span[text()=\"WEB安全加速\"]/ancestor::div[contains(@class,\"FeMenuItemGroup\") and not(contains(@class,\"header\"))]',time_wait=5).click()\n  File \"D:\\software\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 80, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"D:\\software\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 633, in _execute\n    return self._parent.execute(command, params)\n  File \"D:\\software\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 321, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\software\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 242, in check_response\n    raise exception_class(message, screen, stacktrace)\n",
      "steps" : [ {
        "name" : "打开web安全加速，选择模块：'业务列表'",
        "time" : {
          "start" : 1607507817798,
          "stop" : 1607507818873,
          "duration" : 1075
        },
        "status" : "broken",
        "statusMessage" : "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div class=\"FeMenuItemGroup FeMenuItemGroup--open FeMenuItemGroup\">...</div> is not clickable at point (92, 354). Other element would receive the click: <div class=\"el-dialog__wrapper yd-dialog is-aside yd-dialog-aside--top size--undefined DmDialog\" style=\"z-index: 3010;\">...</div>\n  (Session info: chrome=85.0.4183.102)\n\n",
        "statusTrace" : "  File \"D:\\software\\python\\lib\\site-packages\\allure_commons\\_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"D:\\workspace\\pytest1\\page\\web_security_list.py\", line 21, in click_web\n    self.find_element('xpath', '//span[text()=\"WEB安全加速\"]/ancestor::div[contains(@class,\"FeMenuItemGroup\") and not(contains(@class,\"header\"))]',time_wait=5).click()\n  File \"D:\\software\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 80, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"D:\\software\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 633, in _execute\n    return self._parent.execute(command, params)\n  File \"D:\\software\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 321, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\software\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 242, in check_response\n    raise exception_class(message, screen, stacktrace)\n",
        "steps" : [ {
          "name" : "查找元素:类型-'xpath'，定位：'//span[text()=\"WEB安全加速\"]/ancestor::div[contains(@class,\"FeMenuItemGroup\") and not(contains(@class,\"header\"))]'",
          "time" : {
            "start" : 1607507817798,
            "stop" : 1607507817806,
            "duration" : 8
          },
          "status" : "passed",
          "steps" : [ ],
          "attachments" : [ ],
          "parameters" : [ {
            "name" : "type",
            "value" : "'xpath'"
          }, {
            "name" : "path",
            "value" : "'//span[text()=\"WEB安全加速\"]/ancestor::div[contains(@class,\"FeMenuItemGroup\") and not(contains(@class,\"header\"))]'"
          }, {
            "name" : "time_wait",
            "value" : "5"
          } ],
          "hasContent" : true,
          "stepsCount" : 0,
          "attachmentsCount" : 0,
          "shouldDisplayMessage" : false
        } ],
        "attachments" : [ ],
        "parameters" : [ {
          "name" : "module_name",
          "value" : "'业务列表'"
        } ],
        "hasContent" : true,
        "stepsCount" : 1,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : true
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 2,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "添加失败截图...",
      "time" : {
        "start" : 1607507818919,
        "stop" : 1607507819257,
        "duration" : 338
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "d22aed8f9beb6604",
        "name" : "失败截图",
        "source" : "d22aed8f9beb6604.png",
        "type" : "image/png",
        "size" : 115400
      } ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 7,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ {
    "name" : "browser::0",
    "time" : {
      "start" : 1607507937600,
      "stop" : 1607507937601,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "测试修改配置并校验配置是否生效"
  }, {
    "name" : "story",
    "value" : "批量修改tls版本"
  }, {
    "name" : "severity",
    "value" : "critical"
  }, {
    "name" : "tag",
    "value" : "test"
  }, {
    "name" : "tag",
    "value" : "page"
  }, {
    "name" : "tag",
    "value" : "run(order=5)"
  }, {
    "name" : "parentSuite",
    "value" : "test_web_page"
  }, {
    "name" : "suite",
    "value" : "test_config"
  }, {
    "name" : "subSuite",
    "value" : "TestConfig"
  }, {
    "name" : "host",
    "value" : "LAPTOP-HRAELMRK"
  }, {
    "name" : "thread",
    "value" : "5764-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_web_page.test_config"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "second_time",
    "value" : "0"
  } ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "run(order=5)", "test", "page" ]
  },
  "source" : "e94e3574d6bdf58a.json",
  "parameterValues" : [ "0" ]
}